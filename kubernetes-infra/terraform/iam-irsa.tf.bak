# Configuração de IAM Roles for Service Accounts (IRSA)

# Obter dados do cluster EKS
data "aws_eks_cluster" "cluster" {
  name = var.cluster_name
}

# Obter certificado do OIDC provider
data "tls_certificate" "eks" {
  url = data.aws_eks_cluster.cluster.identity[0].oidc[0].issuer
}

# Criar o OIDC Provider para o cluster EKS
resource "aws_iam_openid_connect_provider" "eks" {
  client_id_list  = ["sts.amazonaws.com"]
  thumbprint_list = [data.tls_certificate.eks.certificates[0].sha1_fingerprint]
  url             = data.aws_eks_cluster.cluster.identity[0].oidc[0].issuer
}

locals {
  oidc_provider_url = replace(aws_iam_openid_connect_provider.eks.url, "https://", "")
}

# Policy Document para permitir assumir role pelo ServiceAccount
data "aws_iam_policy_document" "assume_role_policy" {
  statement {
    actions = ["sts:AssumeRoleWithWebIdentity"]
    effect  = "Allow"

    condition {
      test     = "StringEquals"
      variable = "${local.oidc_provider_url}:sub"
      values   = [
        "system:serviceaccount:fastfood:fastfood-app-sa",
        "system:serviceaccount:fastfood:fastfood-secrets-sa"
      ]
    }

    principals {
      identifiers = [aws_iam_openid_connect_provider.eks.arn]
      type        = "Federated"
    }
  }
}

# IAM Role para acesso ao DynamoDB
resource "aws_iam_role" "dynamodb_access" {
  name               = "${var.environment}-fastfood-dynamodb-access"
  assume_role_policy = data.aws_iam_policy_document.assume_role_policy.json
  
  tags = {
    Environment = var.environment
    Application = "fastfood"
  }
}

# Política para acesso ao DynamoDB
resource "aws_iam_policy" "dynamodb_access" {
  name        = "${var.environment}-fastfood-dynamodb-access-policy"
  description = "Política para acesso às tabelas DynamoDB do FastFood"
  
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Action = [
          "dynamodb:GetItem",
          "dynamodb:PutItem",
          "dynamodb:UpdateItem",
          "dynamodb:DeleteItem",
          "dynamodb:Query",
          "dynamodb:Scan",
          "dynamodb:BatchGetItem",
          "dynamodb:BatchWriteItem"
        ]
        Resource = [
          data.terraform_remote_state.database.outputs.clients_table_arn_arn,
          data.terraform_remote_state.database.outputs.products_table_arn_arn,
          data.terraform_remote_state.database.outputs.categories_table_arn_arn,
          data.terraform_remote_state.database.outputs.orders_table_arn_arn,
          data.terraform_remote_state.database.outputs.payments_table_arn_arn,
          "${data.terraform_remote_state.database.outputs.clients_table_arn_arn}/index/*",
          "${data.terraform_remote_state.database.outputs.products_table_arn_arn}/index/*",
          "${data.terraform_remote_state.database.outputs.categories_table_arn_arn}/index/*",
          "${data.terraform_remote_state.database.outputs.orders_table_arn_arn}/index/*",
          "${data.terraform_remote_state.database.outputs.payments_table_arn_arn}/index/*"
        ]
      }
    ]
  })
}

# Anexar política à role
resource "aws_iam_role_policy_attachment" "dynamodb_access" {
  role       = aws_iam_role.dynamodb_access.name
  policy_arn = aws_iam_policy.dynamodb_access.arn
}

# IAM Role para acesso ao Secrets Manager
resource "aws_iam_role" "secrets_access" {
  name               = "${var.environment}-fastfood-secrets-access"
  assume_role_policy = data.aws_iam_policy_document.assume_role_policy.json
  
  tags = {
    Environment = var.environment
    Application = "fastfood"
  }
}

# Política para acesso ao Secrets Manager
resource "aws_iam_policy" "secrets_access" {
  name        = "${var.environment}-fastfood-secrets-access-policy"
  description = "Política para acesso aos secrets do FastFood"
  
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Action = [
          "secretsmanager:GetSecretValue",
          "secretsmanager:DescribeSecret"
        ]
        Resource = [
          data.terraform_remote_state.database.outputs.database_secret_arn,
          data.terraform_remote_state.database.outputs.external_api_secret_arn
        ]
      }
    ]
  })
}

# Anexar política à role
resource "aws_iam_role_policy_attachment" "secrets_access" {
  role       = aws_iam_role.secrets_access.name
  policy_arn = aws_iam_policy.secrets_access.arn
}

# Outputs para uso em outros módulos
output "dynamodb_role_arn" {
  value       = aws_iam_role.dynamodb_access.arn
  description = "ARN da IAM Role para acesso ao DynamoDB"
}

output "secrets_role_arn" {
  value       = aws_iam_role.secrets_access.arn
  description = "ARN da IAM Role para acesso ao Secrets Manager"
}

output "oidc_provider_arn" {
  value       = aws_iam_openid_connect_provider.eks.arn
  description = "ARN do OIDC Provider para IRSA"
}
